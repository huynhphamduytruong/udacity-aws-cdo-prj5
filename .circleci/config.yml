version: "2.1"
orbs:
  slack: circleci/slack@4.1
  docker: circleci/docker@2.2.0
  aws-eks: circleci/aws-eks@2.2.0
  kubernetes: circleci/kubernetes@1.3.1

executors:
  docker:
    docker:
      - image: cimg/base:stable
  python:
    docker:
      - image: cimg/python:3.10-browsers

jobs:
  say-hello:
    executor: docker
    steps:
      - checkout
      - run:
          name: "Say hello"
          command: "echo Hello, World!"
      - slack/notify:
          event: pass
          template: basic_success_1
      - slack/notify:
          event: fail
          template: basic_fail_1

  lint-dockerfile:
    executor: python
    steps:
      - docker/hadolint:
          dockerfiles: ./Dockerfile
          # hadolint-tag: 2.2.0-debian
          # attach-workspace: true
      - slack/notify:
          event: pass
          template: basic_success_1
          step_name: lint-dockerfile
      - slack/notify:
          event: fail
          template: basic_fail_1
          step_name: lint-dockerfile

  build-image:
    executor: docker/machine
    steps:
      - checkout
      - docker/check
      - docker/build:
          image: $DOCKER_LOGIN/$DOCKER_IMG

  create-cluster:
    executor: python
    steps:
      - aws-eks/create-cluster:
          cluster-name: ${EKS_CLUSTER_NAME}
          aws-region: ${AWS_REGION}
          kubectl-version: "v1.21.13"
          nodes: 3
          nodes-max: 5
          nodes-min: 1
          show-eksctl-command: true

  k8s-deployment:
    executor: docker
    steps:
      - checkout
      - kubernetes/install-kubectl:
          kubectl-version: "v1.21.13"
      - aws-eks/update-kubeconfig-with-authenticator:
          kubectl-version: "v1.21.13"
          cluster-name: ${EKS_CLUSTER_NAME}
          aws-region: ${AWS_REGION}
      - kubernetes/create-or-update-resource:
          # get-rollout-status: true
          resource-file-path: k8s.yml
          show-kubectl-command: true
      - run:
          name: "Check the nodes"
          command: |
            kubectl get nodes
      - run:
          name: "Check the deployments"
          command: |
            kubectl get deployments
      - run:
          name: "Check the pods"
          command: |
            kubectl get pods -o wide
      - run:
          name: "Check the service"
          command: |
            kubectl get service/truonghpd-capstone-service
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1
          step_name: k8s-deployment
      - slack/notify:
          event: fail
          template: basic_fail_1
          step_name: k8s-deployment

  check-health:
    executor: docker
    steps:
      - run:
          name: "Curl to service to check for health"
          command: |
            SVC_HOSTNAME=$(kubectl get service/truonghpd-capstone-service -o jsonpath="{.status.loadBalancer.ingress[0].hostname}")
            curl $SVC_HOSTNAME
      - slack/notify:
          event: pass
          template: basic_success_1
          step_name: check-health
      - slack/notify:
          event: fail
          template: basic_fail_1
          step_name: check-health

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  main-workflow:
    jobs:
      - say-hello
      - lint-dockerfile
      - build-image:
          requires: [lint-dockerfile]
      - docker/publish:
          requires: [build-image]
          image: $DOCKER_LOGIN/$DOCKER_IMG
          tag: "latest,$CIRCLE_SHA1"
          update-description: true
      - create-cluster
      - k8s-deployment:
          requires: [docker/publish, create-cluster]
      - check-health:
          requires: [k8s-deployment]
